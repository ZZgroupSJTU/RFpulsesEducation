function [spins, fid] = ApplyPulseExchange(spins, pulse)
% ApplyPulseExchange  Applies a pulse to an exchanging spin structure.
%   [spins, fid] = ApplyPulseExchange(spins, pulse)
%
% The spins are in a structure of the form (N: number of spins per position):
%   spins(i).r      [x; y; z] in mm
%   spins(i).M      3N*1 vector of the form [Mx1; My1; Mz1; Mx2; My2;
%                   Mz2; ... ]
%   spins(i).cs     N*1 vector of chemical shifts of spins, in ppm
%   spins(i).T1     N*1 vector of T1s of spins, ms
%   spins(i).T2     N*1 vector of T2s of spins, ms
%   spins(i).M0     N*1 vector of equilibrium magnetization values
%   spins(i).B1     Scales RF at the position
%   spins(i).RS     Receiver sensitivity scaling at position r
%   spins(i).K      N*N exchange matrix, with exchange constants in Hz.
%                   Note the diagonal in each row needs to equal 
%                   -sum(row, except diagonal)
% The pulse structure is as follows:
%   pulse.tp        Pulse duration in ms
%   pulse.RFamp     1xM vector of pulse amplitude, in kHz
%   pulse.RFphase   1xM vector of pulse phase, in radians
%   pulse.Gx        1xM vector of x-gradient
%   pulse.Gy        1xM vector of x-gradient
%   pulse.Gz        1xM vector of x-gradient
%   pulse.offset    Pulse offset, in kHz. Optional field (assumed 0
%                   otherwise)
%
% is the same old pulse structure used in ApplyPulseRelax and so
% forth.

numSpins = numel(spins);
numSteps = numel(pulse.RFamp);
gm = GetGyromagneticRatio('1h'); % kHz/mT. Assume protons

RFx = pulse.RFamp.*cos(pulse.RFphase); % kHz
RFy = pulse.RFamp.*sin(pulse.RFphase); % kHz

BxMat = [ 0 0  0;
          0 0  1;
          0 -1 0];

ByMat = [ 0 0 -1;
          0 0  0;
          1 0  0];

BzMat = [ 0  1 0;
          -1 0 0;
           0 0 0];
       
      
dt = pulse.tp/numel(pulse.RFamp); % ms
fid = zeros(1, numel(pulse.RFamp));


for idxSpin=1:numSpins
    numSites = numel(spins(idxSpin).cs);
    if numel(spins(idxSpin).T1)~=numSites 
        if numel(spins(idxSpin).T1)==1
            T1 = repmat(spins(idxSpin).T1, numSites, 1);
        else
            error('Number of T1 values is incompatible.');
        end
    else
        T1 = spins(idxSpin).T1;
    end
    if numel(spins(idxSpin).T2)~=numSites 
        if numel(spins(idxSpin).T2)==1
            T2 = repmat(spins(idxSpin).T2, numSites, 1);
        else
            error('Number of T2 values is incompatible.');
        end
    else
        T2 = spins(idxSpin).T2;
    end
    if numel(spins(idxSpin).M0)~=numSites 
        if numel(spins(idxSpin).M0)==1
            M0 = repmat(spins(idxSpin).M0, numSites, 1);
        else
            error('Number of M0 values is incompatible.');
        end
    else
        M0 = spins(idxSpin).M0;
    end
    if isfield(pulse, 'offset')
        pulseOffset = pulse.offset; % kHz
    else
        pulseOffset = 0;
    end
    offsetAngle     = 2*pi*pulseOffset*dt; % in radians
    offsetMatrix    = RotMat([0 0 1], offsetAngle); 
    offsetMatrixInv = RotMat([0 0 1], -offsetAngle);
    offsetMatrix    = kron(eye(numSites), offsetMatrix);
    offsetMatrixInv = kron(eye(numSites), offsetMatrixInv);
    
    Bx = kron(eye(numSites), BxMat);
    By = kron(eye(numSites), ByMat);
    Bz = kron(eye(numSites), BzMat);
    
    % Create 3N*3N relaxation matrix, in kHz
    RDiag = [];
    R0Diag = [];
    for idxSite=1:numSites
        RDiag = [RDiag, 1/T2(idxSite), 1/T2(idxSite), 1/T1(idxSite)];
        R0Diag = [R0Diag; 0; 0; M0(idxSite)/T1(idxSite)];
    end
    R = diag(RDiag);
    % Create 3N*3N exchange matrix, in kHz
    K = kron(spins(idxSpin).K, eye(3));
    % Create 3N*3N chemical shift matrix, CS, in rad*kHz
    CS = zeros(3*numSites, 3*numSites);
    for idxSite=1:numSites
        CS((idxSite-1)*3+1, (idxSite-1)*3+2) = 2*pi*(spins(idxSpin).cs(idxSite) - pulseOffset);  % kHz
        CS((idxSite-1)*3+2, (idxSite-1)*3+1) = -2*pi*(spins(idxSpin).cs(idxSite) - pulseOffset); % kHz
    end
    M = zeros(3*numSites, numSteps+1); % M(:,1) is t=0 and M(:,numSteps+1) is t=pulse.tp
    % M(:,1) = spins(idxSpin).M;
    M(:,1) = offsetMatrixInv*spins(idxSpin).M;
    for idxStep=1:numSteps
        % fid(idxStep) = fid(idxStep) + sum(spins(idxSpin).M(1:3:end)) + 1i*sum(spins(idxSpin).M(2:3:end));
        A = CS + spins(idxSpin).B1*2*pi*Bx*RFx(idxStep) + spins(idxSpin).B1*2*pi*By*RFy(idxStep) - R + K;  % rad*kHz
        M(:, idxStep+1) =  expm(B*dt)*M(:, idxStep) + R0Diag;
    end
    M(:,end) = offsetMatrix*M(:,end);
    fid = fid + spins(idxSpin).RS*(sum(M(1:3:end, 1:numSteps), 1) + 1i*sum(M(2:3:end, 1:numSteps), 1));
    spins(idxSpin).M = M(:,end);
end


